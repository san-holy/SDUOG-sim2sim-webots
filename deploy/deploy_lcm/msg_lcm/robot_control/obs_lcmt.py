"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class obs_lcmt(object):

    __slots__ = ["timestamp_us", "base_lin_vel", "base_ang_vel", "gravity", "commands", "pos", "vel", "torque", "terrain"]

    __typenames__ = ["int64_t", "double", "double", "double", "double", "double", "double", "double", "float"]

    __dimensions__ = [None, [3], [3], [3], [4], [12], [12], [12], [187]]

    def __init__(self):
        self.timestamp_us = 0
        """ LCM Type: int64_t """
        self.base_lin_vel = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: double[3] """
        self.base_ang_vel = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: double[3] """
        self.gravity = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: double[3] """
        self.commands = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: double[4] """
        self.pos = [ 0.0 for dim0 in range(12) ]
        """ LCM Type: double[12] """
        self.vel = [ 0.0 for dim0 in range(12) ]
        """ LCM Type: double[12] """
        self.torque = [ 0.0 for dim0 in range(12) ]
        """ LCM Type: double[12] """
        self.terrain = [ 0.0 for dim0 in range(187) ]
        """ LCM Type: float[187] """

    def encode(self):
        buf = BytesIO()
        buf.write(obs_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp_us))
        buf.write(struct.pack('>3d', *self.base_lin_vel[:3]))
        buf.write(struct.pack('>3d', *self.base_ang_vel[:3]))
        buf.write(struct.pack('>3d', *self.gravity[:3]))
        buf.write(struct.pack('>4d', *self.commands[:4]))
        buf.write(struct.pack('>12d', *self.pos[:12]))
        buf.write(struct.pack('>12d', *self.vel[:12]))
        buf.write(struct.pack('>12d', *self.torque[:12]))
        buf.write(struct.pack('>187f', *self.terrain[:187]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != obs_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return obs_lcmt._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = obs_lcmt()
        self.timestamp_us = struct.unpack(">q", buf.read(8))[0]
        self.base_lin_vel = struct.unpack('>3d', buf.read(24))
        self.base_ang_vel = struct.unpack('>3d', buf.read(24))
        self.gravity = struct.unpack('>3d', buf.read(24))
        self.commands = struct.unpack('>4d', buf.read(32))
        self.pos = struct.unpack('>12d', buf.read(96))
        self.vel = struct.unpack('>12d', buf.read(96))
        self.torque = struct.unpack('>12d', buf.read(96))
        self.terrain = struct.unpack('>187f', buf.read(748))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if obs_lcmt in parents: return 0
        tmphash = (0x86ee96ee5f6624e7) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if obs_lcmt._packed_fingerprint is None:
            obs_lcmt._packed_fingerprint = struct.pack(">Q", obs_lcmt._get_hash_recursive([]))
        return obs_lcmt._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", obs_lcmt._get_packed_fingerprint())[0]

